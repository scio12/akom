import Head from "next/head";
import { DateTime } from "luxon";
import { useEffect } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { ToastContainer, toast } from "react-toastify";
import { useForm, useFieldArray } from "react-hook-form";

import type { GetServerSideProps } from "next";
import { env } from "@/env/client.mjs";

import "react-toastify/dist/ReactToastify.css";
import "picnic/picnic.min.css";

import styles from "@/styles/Home.module.css";

import { schema, type FormValues } from "@/schemas/home.schema";

interface IProps {
  cookies: { [key: string]: string };
}

export default function Home({ cookies }: IProps) {
  const { control, register, setValue, handleSubmit, formState, reset } =
    useForm<FormValues>({
      resolver: zodResolver(schema),
      defaultValues: {
        kelas: [{ value: "XII IPA 4" }],
      },
    });
  const { fields, append, remove } = useFieldArray({
    name: "kelas",
    control,
  });

  useEffect(() => {
    const now = DateTime.now().setLocale("id");
    const isNextWeek = now.weekday >= 3;

    const nextSchedule = isNextWeek
      ? now.startOf("week").plus({ week: 1, day: 2 })
      : now.plus({ day: 3 - now.weekday });

    setValue(
      "tanggalPembuatan",
      `Bekasi, ${now.toLocaleString(DateTime.DATE_FULL)}`
    );
    setValue("jadwalReguler", nextSchedule.toLocaleString(DateTime.DATE_FULL));
    setValue("waktuReguler", "16.10 - selesai");

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const onSubmit = async (pdfInfo: FormValues) => {
    const blob = await toast.promise(
      fetch(`${env.NEXT_PUBLIC_FUNCTION_ENDPOINT}/.netlify/functions/gen-pdf`, {
        method: "POST",
        body: JSON.stringify({
          pdfInfo,
          userInfo: cookies,
        }),
      }).then((result) => result.blob()),
      {
        pending: "Mengunduh...",
        success: "Berhasil mencetak file pdf ðŸ‘Œ",

        error: {
          render() {
            reset(
              {},
              {
                keepValues: true,
                keepIsSubmitted: false,
              }
            );

            return "Gagal mencetak file pdf, coba lagi nanti";
          },
        },
      }
    );

    const objUrl = URL.createObjectURL(blob);

    const anchor = document.createElement("a");
    anchor.setAttribute("download", "");
    anchor.setAttribute("href", objUrl);

    anchor.click();
  };

  return (
    <>
      <Head>
        <title>Pembuatan Surat AKOM</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ToastContainer />

      <main className={styles.container}>
        <div>
          <form onSubmit={handleSubmit(onSubmit)}>
            <fieldset className={styles.group}>
              <label>Surat Ke</label>
              <input
                className={styles.input}
                placeholder="Urutan surat ke"
                disabled={formState.isSubmitting}
                {...register("suratKe")}
              />
            </fieldset>

            <fieldset className={styles.group}>
              <label>Tanggal Pembuatan Dokumen</label>
              <input
                className={styles.input}
                placeholder="Tempat, Tanggal Bulan Tahun"
                disabled={formState.isSubmitting}
                {...register("tanggalPembuatan")}
              />
            </fieldset>

            <fieldset className={styles.group}>
              <label>Jadwal Reguler</label>
              <input
                className={styles.input}
                placeholder="Tanggal Bulan Tahun"
                disabled={formState.isSubmitting}
                {...register("jadwalReguler")}
              />
            </fieldset>

            <fieldset className={styles.group}>
              <label>Waktu Reguler</label>
              <input
                className={styles.input}
                placeholder="Masukan Waktu Reguler"
                disabled={formState.isSubmitting}
                {...register("waktuReguler")}
              />
            </fieldset>

            <fieldset className={styles.group}>
              <label>Kelas Yang Dipakai</label>
              {fields.map((field, index) => (
                <div
                  key={field.id}
                  style={{
                    display: "inline-flex",
                    width: "100%",
                    gap: "0.3em",
                  }}
                >
                  <button
                    onClick={() => append({ value: "" })}
                    disabled={formState.isSubmitting}
                  >
                    Tambah
                  </button>
                  {index > 0 ? (
                    <button
                      className="error"
                      disabled={formState.isSubmitting}
                      onClick={() => remove(index)}
                    >
                      Hapus
                    </button>
                  ) : null}
                  <input
                    style={{ width: "100%" }}
                    className={styles.input}
                    placeholder="Masukan Kelas reguler"
                    disabled={formState.isSubmitting}
                    {...register(`kelas.${index}.value` as const)}
                  />
                </div>
              ))}
            </fieldset>

            <button
              disabled={formState.isSubmitting}
              className={styles.button}
              type="submit"
            >
              Cetak
            </button>
          </form>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  return {
    props: {
      cookies: context.req.cookies,
    },
  };
};
